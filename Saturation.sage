class IdealQuotient:
    """
    Finds ideal_quotient
    param: I: list of generating functions for ideal 1
    param: J: list of generating functions for ideal 2
    self.sub_ideals: ideal quotients of I and a principle ideal generated by j in J
    """
    def __init__(self, I, J):
        self.I, self.J = I, J
        self.sub_ideals = []
        self.ideal_quotient = self.main()

    @staticmethod
    def __divide(basis_dividend, divisor):
        basis_quotient = []
        for dividend in basis_dividend:
            quotient_terms = dividend.lift(Ideal(divisor))
            quotient = sum([term for term in quotient_terms])
            basis_quotient += [quotient]
        return basis_quotient
    
    def __find_subs(self):
        """ Finds all sub ideal quotients. """
        for j in self.J:
            H = ideal(j).intersection(ideal(self.I)).groebner_basis()
            self.sub_ideals += [self.__divide(H, j)]  #  sub ideal quotients
            
    def intersect_subs(self):
        """ Finds ideal intersection of all sub_ideals. """
        intersection_ideal = ideal(self.sub_ideals[0])
        for i in range(1, len(self.sub_ideals)):
            intersection_ideal = intersection_ideal.intersection(ideal(self.sub_ideals[i]))
        return intersection_ideal
    
    def main(self):
        self.__find_subs()
        ideal_quotient = self.intersect_subs().groebner_basis()
        return ideal_quotient

class Saturation(IdealQuotient):
    """
    Finds saturation of I w.r.t. J
    Note: requires x_0 to be a defined variable.
    param: I: list of generating functions for ideal 1
    param: J: list of generating functions for ideal 2
    """
    def __init__(self, I, J):
        super().__init__(I, J)
        self.saturation = self.main()
    
    def __find_subs(self):
        """ Finds all sub saturations where 'sub_sats' are
            the saturations of I w.r.t. principle ideal generated by j in J. """
        for j in self.J:
            tilda_I = ideal(self.I + [1 - x_0*j]).groebner_basis()
            sub_sats = [f for f in tilda_I if 'x_0' not in str(f)]  # sub saturations
            self.sub_ideals += [sub_sats]
            
    def main(self):
        self.__find_subs()
        saturation = self.intersect_subs().groebner_basis()
        return saturation   
